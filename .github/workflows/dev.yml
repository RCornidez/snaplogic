name: validate dev branch and promote

on:
  push:
    branches: [ "dev" ]     
  workflow_dispatch:             

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # fetch just enough history for a two‑dot diff
          fetch-depth: 2

      - name: Get changed .slp files (git diff)
        id: diff
        shell: bash
        run: |
          # If it's the very first commit on the branch, before may be all zeros.
          BEFORE="${{ github.event.before }}"
          if [[ "$BEFORE" == "0000000000000000000000000000000000000000" ]]; then
            # Fall back to the parent of HEAD so diff still works.
            BEFORE=$(git rev-parse HEAD^)
          fi

          # List added/modified/renamed *.slp files between BEFORE…HEAD
          CHANGED=$(git diff --name-only "$BEFORE" ${{ github.sha }} -- '*.slp')

          # Expose as a multiline output
          {
            echo 'changed_files<<EOF'
            echo "$CHANGED"
            echo EOF
          } >> "$GITHUB_OUTPUT"

      - name: Validate pipelines with SnapLogic linter
        if: steps.diff.outputs.changed_files != ''
        env:
          BASE_URL:      ${{ vars.SNAP_API_BASE_URL }}
          AUTH_TOKEN:    ${{ secrets.SNAP_AUTH_TOKEN }}
          ORG:           ${{ vars.SNAP_ORG }} 
          PROJECT_SPACE: ${{ vars.SNAP_PROJECT_SPACE }}
          DEV_PROJECT:   ${{ vars.SNAP_DEV_PROJECT }}
        shell: bash
        run: |
          set -euo pipefail

          echo "Changed .slp files:"
          while IFS= read -r FILE; do
            echo "• $FILE"

            enc() { echo "${1// /%20}"; }

            ORG_SEG=$(enc "$ORG")
            SPACE_SEG=$(enc "$PROJECT_SPACE")
            PROJ_SEG=$(enc "$DEV_PROJECT")
            PIPE_SEG=$(enc "$(basename "$FILE" .slp)")

            API_PATH="$ORG_SEG/$SPACE_SEG/$PROJ_SEG/$PIPE_SEG"
            URL="${BASE_URL%/}/api/1/rest/public/pipeline/linter/$API_PATH"

            echo "Validating with: $URL"
            STATUS=$(curl -s -o response.json -w "%{http_code}" \
                         -X POST "$URL" \
                         -H "Authorization: Basic $AUTH_TOKEN" \
                         -H "Content-Type: application/json")

            cat response.json || true

            # Bail out early on HTTP errors
            if [ "$STATUS" -ne 200 ]; then
              echo "::error title=SnapLogic Linter::HTTP $STATUS while validating $FILE"
              exit 1
            fi

            # Fail the build if any Critical messages are present
            if grep -q '"message_level":[[:space:]]*"Critical"' response.json; then
              echo "::error title=SnapLogic Linter::Critical issues found in $FILE"
              exit 1
            fi

            echo "$FILE validated successfully"
          done <<< "${{ steps.diff.outputs.changed_files }}"
     
      
      - name: Run SnapLogic Test Runner
        if: steps.diff.outputs.changed_files != ''
        env:
          # Fixed values for the test‑runner task
          TEST_RUNNER_URL: https://elastic.snaplogic.com/api/1/rest/public/project/repo-status/Partners/York%20Solutions/${{ vars.SNAP_UTILITIES_PROJECT }}/Test_Runner_Task
          TEST_RUNNER_TOKEN: ${{ secrets.SNAP_TEST_RUNNER_AUTH_TOKEN }}

          # Variables that describe where the pipelines live
          ORG: Partners
          PROJECT_SPACE: ${{ vars.SNAP_PROJECT_SPACE }}
          DEV_PROJECT:   ${{ vars.SNAP_DEV_PROJECT }}
        shell: bash
        run: |
          set -euo pipefail
          enc() { echo "${1// /%20}"; }        # space → %20 helper

          ORG_ESC=$(enc "$ORG")
          SPACE_ESC=$(enc "$PROJECT_SPACE")
          PROJ_ESC=$(enc "$DEV_PROJECT")

          # -------- Build JSON array of full pipeline paths ------------
          pipelines_json="["

          while IFS= read -r FILE; do
            # strip extension, URL‑encode spaces
            PIPE_ESC=$(enc "$(basename "$FILE" .slp)")
            FULL_PATH="/$ORG_ESC/$SPACE_ESC/$PROJ_ESC/$PIPE_ESC"
            pipelines_json+="\"$FULL_PATH\","
          done <<< "${{ steps.diff.outputs.changed_files }}"

          # remove trailing comma, close array
          pipelines_json="${pipelines_json%,}]"

          echo "Pipelines to validate: $pipelines_json"

          # ------------- Call the Test Runner triggered task ------------
          STATUS=$(curl -s -o response.json -w "%{http_code}" \
                     -X POST "$TEST_RUNNER_URL" \
                     -H "Authorization: Bearer $TEST_RUNNER_TOKEN" \
                     -H "Content-Type: application/json" \
                     -d "$pipelines_json")

          echo "--- Test‑Runner response (HTTP $STATUS) ---"
          cat response.json || true
          echo "------------------------------------------"

          # Treat non‑200 or FAILED status as CI failure
          if [ "$STATUS" -ne 200 ] || grep -q '"status"[[:space:]]*:[[:space:]]*"FAILED"' response.json; then
            echo "::error title=SnapLogic Test Runner::One or more pipelines failed validation"
            exit 1
          fi

          echo " All pipelines passed Test Runner validation"

          
      - name: No pipeline changes
        if: steps.diff.outputs.changed_files == ''
        run: echo "No .slp files changed – skipping validation." 
